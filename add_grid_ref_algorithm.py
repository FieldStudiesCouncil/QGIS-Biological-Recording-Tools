# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AddGridRef
                                 A QGIS plugin
 Adds British or Irish grid references to point layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-01-30
        copyright            : (C) 2019 by Field Studies Council
        email                : r.burkmar@field-studies-council.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Field Studies Council'
__date__ = '2019-01-30'
__copyright__ = '(C) 2019 by Field Studies Council'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from PyQt5.QtCore import (QCoreApplication, QVariant)
from qgis.core import (QgsProcessing,
                       QgsMessageLog,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsField,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterString,
                       QgsProcessingParameterFeatureSink)


class AddGridRefAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    GRTYPE = 'GRYPE'
    PRECISIONS = 'PRECISIONS'
    PREFIX = 'PREFIX'
    lGrTypes = ["British National Grid", "Irish National Grid"]
    #aPrecisions = ["10 figure GR (1 m)",
    #            "8 figure GR (10 m)",
    #            "6 figure GR (100 m)",
    #            "Monad (1 km)", 
    #            "Tetrad (2 km)", 
    #            "Quadrant (5 km)",
    #            "Hectad (10 km)",
    #            "100 km"]

    dPrecisions = {
            "10 figure GR (1 m)": 1,
            "8 figure GR (10 m)": 10,
            "6 figure GR (100 m)": 100,
            "Monad (1 km)": 1000,
            "Tetrad (2 km)": 2000,
            "Quadrant (5 km)": 5000,
            "Hectad (10 km)": 10000,
            "100 km": 100000
        }
    aPrecisions = []
    for key, value in dPrecisions.items():
        aPrecisions.append(key)

    def logMessage(self, message):
        QgsMessageLog.logMessage(message, "Add Grid Ref Algorithm")

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # Parameter for selecting British or Irish Grid
        self.addParameter(
            QgsProcessingParameterEnum(
                self.GRTYPE,
                self.tr('Select British or Irish National Grid'),
                self.lGrTypes,
                False # Single select
            )
        )

        # Parameter for selecting grid reference precisions
        self.addParameter(
            QgsProcessingParameterEnum(
                self.PRECISIONS,
                self.tr('Select the type of Grid References to add'),
                self.aPrecisions,
                True # Multi select
            )
        )

        # Parameter for prefixing field name
        self.addParameter(
            QgsProcessingParameterString(
                self.PREFIX,
                self.tr('Optionally, indicate a short prefix for output column names'),
                None, # No default value
                False, # Not multi-line
                True # Optional
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        fields = source.fields()

        # Get the field prefix
        prefix = self.parameterAsString (parameters, self.PREFIX, context)
        prefix = prefix.replace(" ", "")
        self.logMessage("Prefix is " + prefix)

        # Get the precision choices and make the appropriate output fields
        precisions = self.parameterAsEnums (parameters, self.PRECISIONS, context)
        for p in precisions:
            self.logMessage("Precision is " + self.aPrecisions[p])

        
        #newField = QgsField("rtmp", QVariant.String)
        #fields.append(newField)

        # Create the feature sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, fields, source.wkbType(), source.sourceCrs())

    
        # Get the other parameters
        grtype = self.parameterAsEnum (parameters, self.GRTYPE, context)
        self.logMessage("grtype is " + str(grtype))

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()

        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            # Add grid references in here

            # Add a feature in the sink
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Add GRs to point layers'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        #return 'Grid references'
        return None
    
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return AddGridRefAlgorithm()
